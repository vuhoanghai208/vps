-- 🌟 All-in-One Optimizer for Roblox (Improved Structure) 🌟
repeat task.wait() until game:IsLoaded()
repeat task.wait() until game:GetService("Players").LocalPlayer

---------------------------------------------------------------------
-- 🔹 Services & Variables
---------------------------------------------------------------------
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local localPlayer = Players.LocalPlayer
local playerGui = localPlayer:WaitForChild("PlayerGui", 10)

-- Character handling
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

localPlayer.CharacterAdded:Connect(function(newChar)
    character = newChar
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
end)

---------------------------------------------------------------------
-- 🔹 Sunflower Auto Collector
---------------------------------------------------------------------
local function setupSunflowerCollector()
    local success, effectHolder = pcall(function()
        return workspace:WaitForChild("EffectHolder", 5)
    end)
    
    if not success or not effectHolder then
        warn("[Optimizer] EffectHolder not found - skipping sunflower collector")
        return
    end
    
    local collectEvent
    pcall(function()
        collectEvent = ReplicatedStorage:WaitForChild("RemoteEvents", 5):WaitForChild("CollectCollectable", 5)
    end)
    
    if not collectEvent then
        warn("[Optimizer] CollectCollectable event not found")
        return
    end
    
    local function collectSunflower(sunflower)
        if not humanoidRootPart or not sunflower or not sunflower.Parent then return end
        
        local targetCFrame
        if sunflower:IsA("BasePart") then
            targetCFrame = sunflower.CFrame
        elseif sunflower:IsA("Model") then
            targetCFrame = sunflower:GetPivot()
        else
            local primaryPart = sunflower:FindFirstChildWhichIsA("BasePart", true)
            if primaryPart then
                targetCFrame = primaryPart.CFrame
            end
        end
        
        if not targetCFrame then return end
        
        local originalCFrame = humanoidRootPart.CFrame
        humanoidRootPart.CFrame = targetCFrame
        task.wait(0.15)
        
        pcall(function()
            collectEvent:FireServer(5002)
        end)
        
        task.wait(0.15)
        humanoidRootPart.CFrame = originalCFrame
    end
    
    -- Collect existing sunflowers
    for _, child in ipairs(effectHolder:GetChildren()) do
        if child.Name == "Sunflower" then
            task.spawn(collectSunflower, child)
        end
    end
    
    -- Monitor new sunflowers
    effectHolder.ChildAdded:Connect(function(child)
        if child.Name == "Sunflower" then
            collectSunflower(child)
        end
    end)
end

---------------------------------------------------------------------
-- 🔹 Configuration
---------------------------------------------------------------------
local CONFIG = {
    WATER_SETTINGS = {
        Reflectance = 0,
        Transparency = 1,
        WaveSize = 0,
        WaveSpeed = 0
    },
    LIGHTING_SETTINGS = {
        Brightness = 0,
        GlobalShadows = false,
        FogEnd = 9e9,
        FogStart = 0
    },
    DESTROY_PATTERNS = {"tree", "water", "bush", "grass", "foilage"},
    PROTECT_PATTERNS = {"baseplate", "ground", "floor", "base", "spawn"},
    BATCH_SIZE = 50,
    PERFORMANCE_CHECK_INTERVAL = 3
}

---------------------------------------------------------------------
-- 🔹 Utility Functions
---------------------------------------------------------------------
local function isProtectedObject(obj)
    local name = obj.Name:lower()
    for _, pattern in ipairs(CONFIG.PROTECT_PATTERNS) do
        if name:find(pattern) then
            return true
        end
    end
    return false
end

local function shouldDestroy(obj)
    local name = obj.Name:lower()
    for _, pattern in ipairs(CONFIG.DESTROY_PATTERNS) do
        if name:find(pattern) then
            return not isProtectedObject(obj)
        end
    end
    return false
end

---------------------------------------------------------------------
-- 🔹 Core Optimization Function (Unified)
---------------------------------------------------------------------
local function optimizeObject(obj)
    if not obj or not obj.Parent then return end
    
    local objType = obj.ClassName
    local isProtected = isProtectedObject(obj)
    
    -- Destroy unwanted objects (but protect important ones)
    if shouldDestroy(obj) and not isProtected then
        pcall(function() obj:Destroy() end)
        return
    end
    
    -- Optimize based on object type
    if objType == "BasePart" or objType == "Part" or objType == "UnionOperation" then
        obj.Transparency = 1
        obj.Material = Enum.Material.Plastic
        obj.Reflectance = 0
        -- Keep collision for protected objects (ground, etc.)
        if not isProtected then
            obj.CanCollide = false
        end
        
    elseif objType == "MeshPart" then
        obj.Transparency = 1
        obj.Material = Enum.Material.Plastic
        obj.Reflectance = 0
        obj.TextureID = ""
        if not isProtected then
            obj.CanCollide = false
        end
        
    elseif objType == "Decal" or objType == "Texture" then
        obj.Transparency = 1
        
    elseif objType == "ParticleEmitter" or objType == "Trail" then
        obj.Enabled = false
        
    elseif objType == "Explosion" then
        obj.BlastPressure = 1
        obj.BlastRadius = 1
        
    elseif objType == "Fire" or objType == "Smoke" or objType == "Sparkles" or objType == "SpotLight" then
        obj.Enabled = false
        
    elseif objType == "SpecialMesh" then
        obj.TextureId = ""
        
    elseif objType == "ShirtGraphic" then
        obj.Graphic = ""
        
    elseif objType == "Shirt" or objType == "Pants" then
        pcall(function()
            obj[objType .. "Template"] = ""
        end)
    end
end

---------------------------------------------------------------------
-- 🔹 Batch Processing
---------------------------------------------------------------------
local function batchOptimize(objects, batchSize)
    batchSize = batchSize or CONFIG.BATCH_SIZE
    local count = 0
    
    for _, obj in pairs(objects) do
        pcall(optimizeObject, obj)
        count = count + 1
        
        if count >= batchSize then
            task.wait()
            count = 0
        end
    end
end

---------------------------------------------------------------------
-- 🔹 Environment Optimization
---------------------------------------------------------------------
local function optimizeTerrain()
    local terrain = Workspace:FindFirstChild("Terrain")
    if not terrain then return end
    
    for property, value in pairs(CONFIG.WATER_SETTINGS) do
        pcall(function()
            terrain["Water" .. property] = value
        end)
    end
    
    pcall(function()
        sethiddenproperty(terrain, "Decoration", false)
    end)
end

local function optimizeLighting()
    for property, value in pairs(CONFIG.LIGHTING_SETTINGS) do
        pcall(function()
            Lighting[property] = value
        end)
    end
    
    pcall(function()
        Lighting:ClearAllChildren()
        sethiddenproperty(Lighting, "Technology", 2)
    end)
end

---------------------------------------------------------------------
-- 🔹 Performance Mode Handler
---------------------------------------------------------------------
local function handlePerformanceMode()
    task.spawn(function()
        while task.wait(CONFIG.PERFORMANCE_CHECK_INTERVAL) do
            pcall(function()
                local settingsGui = playerGui:FindFirstChild("Settings", true)
                if settingsGui then
                    local perfButton = settingsGui:FindFirstChild("Performance mode", true)
                    if perfButton and perfButton:IsA("TextButton") then
                        perfButton.Text = "On"
                        perfButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
                    end
                end
            end)
        end
    end)
    
    task.spawn(function()
        pcall(function()
            local module = ReplicatedStorage:WaitForChild("Others", 5)
                :WaitForChild("UnitCallbacks", 5)
                :WaitForChild("RespectPerformanceMode", 5)
            
            if module and module:IsA("ModuleScript") then
                local func = require(module)
                if type(func) == "function" then
                    func(true)
                end
            end
        end)
    end)
end

---------------------------------------------------------------------
-- 🔹 Connection Manager
---------------------------------------------------------------------
local connections = {}

local function setupConnections()
    -- Wait for map to load
    local map
    local success, error = pcall(function()
        map = Workspace:WaitForChild("Map", 10)
    end)
    
    if not success or not map then
        warn("[Optimizer] Map not found - using Workspace instead")
        map = Workspace
    end
    
    -- Target folders to monitor
    local targetFolders = {"Entities", "Border", "Model", "InvisibleBarrier"}
    
    for _, folderName in ipairs(targetFolders) do
        local folder = map:FindFirstChild(folderName)
        if folder then
            -- Optimize existing objects
            print("[Optimizer] Optimizing", folderName, "folder...")
            batchOptimize(folder:GetDescendants())
            
            -- Monitor new objects
            local connection = folder.DescendantAdded:Connect(function(obj)
                task.wait() -- Small delay for object to fully load
                optimizeObject(obj)
            end)
            
            table.insert(connections, connection)
        end
    end
    
    -- Monitor workspace for new objects
    local workspaceConnection = Workspace.DescendantAdded:Connect(function(obj)
        if obj:IsDescendantOf(map) then
            task.wait()
            optimizeObject(obj)
        end
    end)
    
    table.insert(connections, workspaceConnection)
    
    print("[Optimizer] Set up", #connections, "monitoring connections")
end

---------------------------------------------------------------------
-- 🔹 Cleanup Function
---------------------------------------------------------------------
local function cleanup()
    for _, connection in pairs(connections) do
        if connection then
            connection:Disconnect()
        end
    end
    connections = {}
    print("[Optimizer] Cleaned up connections")
end

---------------------------------------------------------------------
-- 🔹 Main Execution
---------------------------------------------------------------------
local function main()
    print("[🔄 Optimizer] Starting All-in-One Performance Optimizer...")
    
    -- Core optimizations
    optimizeTerrain()
    optimizeLighting()
    
    -- Initial optimization of all workspace objects
    print("[🔄 Optimizer] Optimizing existing objects...")
    batchOptimize(Workspace:GetDescendants(), 100)
    
    -- Setup sunflower collector
    setupSunflowerCollector()
    
    -- Setup monitoring connections
    setupConnections()
    
    -- Handle performance mode
    handlePerformanceMode()
    
    print("[✅ Optimizer] All-in-One Performance Script Loaded Successfully!")
    print("[🛡️ Optimizer] Protected objects (ground/base) will maintain collision")
    print("[📊 Optimizer] Monitoring for new objects and optimizing automatically")
end

-- Handle player leaving (cleanup)
Players.PlayerRemoving:Connect(function(player)
    if player == localPlayer then
        cleanup()
    end)

-- Error handling for main execution
local success, error = pcall(main)
if not success then
    warn("[Optimizer] Error during initialization:", error)
    print("[Optimizer] Attempting basic optimization...")
    pcall(optimizeTerrain)
    pcall(optimizeLighting)
end
